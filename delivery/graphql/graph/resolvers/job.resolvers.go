package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"mgufrone.dev/job-alerts/delivery/graphql/graph/helper"

	"mgufrone.dev/job-alerts/delivery/graphql/graph/model"
	"mgufrone.dev/job-alerts/internal/usecases/job"
)

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context, filter *model.JobFilter, page *model.Pagination) (*model.JobResult, error) {
	var (
		res   model.JobResult
		input job.ListInput
	)
	if filter != nil {
		input.Keyword = filter.Keyword
		input.Skills = filter.Tags
	}
	if page != nil {
		input.PerPage = page.PerPage
		input.Page = page.Page
	}
	input.Fields = helper.GetEdgesPreload(ctx, "edges")
	jobs, total, err := r.jc.List(ctx, input)
	if err != nil {
		return nil, err
	}
	res.Edges = make([]*model.Job, len(jobs))
	for i, j := range jobs {
		var jb model.Job
		jb.FromDomain(j)
		res.Edges[i] = &jb
	}
	res.PageInfo = &model.PageInfo{Total: int(total)}

	return &res, nil
}
