// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Criteria struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type InputCriteria struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Job struct {
	ID             string    `json:"id"`
	Role           string    `json:"role"`
	Description    string    `json:"description"`
	URL            string    `json:"url"`
	Salary         []float64 `json:"salary"`
	CompanyName    string    `json:"companyName"`
	CompanyURL     string    `json:"companyURL"`
	Tags           []string  `json:"tags"`
	Source         Source    `json:"source"`
	Location       string    `json:"location"`
	IsRemote       bool      `json:"isRemote"`
	JobType        string    `json:"jobType"`
	SalaryCurrency string    `json:"salaryCurrency"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

type JobFilter struct {
	Keyword string   `json:"keyword"`
	Tags    []string `json:"tags"`
}

type JobResult struct {
	Edges    []*Job    `json:"edges"`
	PageInfo *PageInfo `json:"pageInfo"`
}

type NewChannel struct {
	Criteria []*InputCriteria `json:"criteria"`
}

type NotificationChannel struct {
	ID       string      `json:"id"`
	Criteria []*Criteria `json:"criteria"`
	Owner    *User       `json:"owner"`
}

type NotificationFilter struct {
	Ids []string `json:"ids"`
}

type NotificationResult struct {
	Edges    []*NotificationChannel `json:"edges"`
	PageInfo *PageInfo              `json:"pageInfo"`
}

type PageInfo struct {
	Total int `json:"total"`
}

type Pagination struct {
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
}

type User struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	AuthID string `json:"authID"`
	Role   int    `json:"role"`
}

type Role string

const (
	RoleUser    Role = "User"
	RoleGuest   Role = "Guest"
	RoleAdmin   Role = "Admin"
	RolePremium Role = "Premium"
)

var AllRole = []Role{
	RoleUser,
	RoleGuest,
	RoleAdmin,
	RolePremium,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleGuest, RoleAdmin, RolePremium:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Source string

const (
	SourceUpwork         Source = "Upwork"
	SourceWeworkRemotely Source = "WeworkRemotely"
)

var AllSource = []Source{
	SourceUpwork,
	SourceWeworkRemotely,
}

func (e Source) IsValid() bool {
	switch e {
	case SourceUpwork, SourceWeworkRemotely:
		return true
	}
	return false
}

func (e Source) String() string {
	return string(e)
}

func (e *Source) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Source(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Source", str)
	}
	return nil
}

func (e Source) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
