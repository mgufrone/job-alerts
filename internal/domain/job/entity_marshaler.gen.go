// Code generated by mgufrone.dev/job-alerts/cmd/generate-domain, DO NOT EDIT.
package job

import (
	"encoding/json"
	jsonparser "github.com/buger/jsonparser"
	try "github.com/mgufrone/go-utils/try"
	helpers "mgufrone.dev/job-alerts/pkg/helpers"
	"strconv"
)

func (e *Entity) UnmarshalJSON(data []byte) error {
	return try.RunOrError(func() error {
		val, err := helpers.GetUUID(data, "id")
		if err != nil {
			return err
		}
		return e.SetID(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "role")
		if err != nil {
			return err
		}
		return e.SetRole(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "companyName")
		if err != nil {
			return err
		}
		return e.SetCompanyName(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "companyURL")
		if err != nil {
			return err
		}
		return e.SetCompanyURL(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "description")
		if err != nil {
			return err
		}
		return e.SetDescription(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "jobURL")
		if err != nil {
			return err
		}
		return e.SetJobURL(val)
	}, func() error {
		var res []string
		_, err := jsonparser.ArrayEach(data, func(value []byte, dataType jsonparser.ValueType, offset int, err error) {
			res = append(res, string(value))
		}, "tags")
		if err != nil {
			return err
		}
		return e.SetTags(res)
	}, func() error {
		val, err := jsonparser.GetString(data, "location")
		if err != nil {
			return err
		}
		return e.SetLocation(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "source")
		if err != nil {
			return err
		}
		return e.SetSource(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "jobType")
		if err != nil {
			return err
		}
		return e.SetJobType(val)
	}, func() error {
		val, err := jsonparser.GetBoolean(data, "isRemote")
		if err != nil {
			return err
		}
		return e.SetIsRemote(val)
	}, func() error {
		var res []float64
		_, err := jsonparser.ArrayEach(data, func(value []byte, dataType jsonparser.ValueType, offset int, err error) {
			v, _ := strconv.ParseFloat(string(value), 64)
			res = append(res, v)
		}, "salary")
		if err != nil {
			return err
		}
		return e.SetSalary(res)
	}, func() error {
		val, err := jsonparser.GetString(data, "salaryCurrency")
		if err != nil {
			return err
		}
		return e.SetSalaryCurrency(val)
	}, func() error {
		val, err := helpers.GetTime(data, "createdAt")
		if err != nil {
			return err
		}
		return e.SetCreatedAt(val)
	}, func() error {
		val, err := helpers.GetTime(data, "updatedAt")
		if err != nil {
			return err
		}
		return e.SetUpdatedAt(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "title")
		if err != nil {
			return err
		}
		return e.SetTitle(val)
	})
}
func (e *Entity) MarshalJSON() ([]byte, error) {
	res := map[string]interface{}{
		"id":             e.ID(),
		"role":           e.Role(),
		"companyName":    e.CompanyName(),
		"companyURL":     e.CompanyURL(),
		"description":    e.Description(),
		"jobURL":         e.JobURL(),
		"tags":           e.Tags(),
		"location":       e.Location(),
		"source":         e.Source(),
		"jobType":        e.JobType(),
		"isRemote":       e.IsRemote(),
		"salary":         e.Salary(),
		"salaryCurrency": e.SalaryCurrency(),
		"createdAt":      e.CreatedAt().UnixMilli(),
		"updatedAt":      e.UpdatedAt().UnixMilli(),
		"title":          e.Title(),
	}
	return json.Marshal(res)
}
