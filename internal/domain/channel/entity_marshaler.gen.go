// Code generated by mgufrone.dev/job-alerts/cmd/generate-domain, DO NOT EDIT.
package channel

import (
	"encoding/json"
	jsonparser "github.com/buger/jsonparser"
	uuid "github.com/google/uuid"
	try "github.com/mgufrone/go-utils/try"
	user "mgufrone.dev/job-alerts/internal/domain/user"
	helpers "mgufrone.dev/job-alerts/pkg/helpers"
)

func (e *Entity) UnmarshalJSON(data []byte) error {
	return try.RunOrError(func() error {
		val, err := helpers.GetUUID(data, "id")
		if err != nil {
			return err
		}
		return e.SetID(val)
	}, func() error {
		var ref user.Entity
		val, err := helpers.GetUUID(data, "userID")
		if err != nil {
			return err
		}
		if val == uuid.Nil {
			return nil
		}
		roles, err := jsonparser.GetString(data, "user_roles")
		if err != nil {
			return err
		}
		if roles != "" {
			_ = ref.SetRoles([]string{roles})
		}
		_ = ref.SetID(val)
		return e.SetUser(&ref)
	}, func() error {
		val, err := jsonparser.GetString(data, "name")
		if err != nil {
			return err
		}
		return e.SetName(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "description")
		if err != nil {
			return err
		}
		return e.SetDescription(val)
	}, func() error {
		val, err := jsonparser.GetBoolean(data, "isActive")
		if err != nil {
			return err
		}
		return e.SetIsActive(val)
	}, func() error {
		val, err := jsonparser.GetString(data, "scheduleAt")
		if err != nil {
			return err
		}
		return e.SetScheduleAt(val)
	}, func() error {
		val, err := helpers.GetTime(data, "createdAt")
		if err != nil {
			return err
		}
		return e.SetCreatedAt(val)
	}, func() error {
		val, err := helpers.GetTime(data, "updatedAt")
		if err != nil {
			return err
		}
		return e.SetUpdatedAt(val)
	}, func() error {
		var res []string
		_, err := jsonparser.ArrayEach(data, func(value []byte, dataType jsonparser.ValueType, offset int, err error) {
			res = append(res, string(value))
		}, "channels")
		if err != nil {
			return err
		}
		return e.SetChannels(res)
	}, func() error {
		res, _, _, err := jsonparser.Get(data, "criterias")
		if err != nil {
			return err
		}
		return e.SetCriterias(res)
	})
}
func (e *Entity) MarshalJSON() ([]byte, error) {
	res := map[string]interface{}{
		"id": e.ID(),
		"user_roles": func() string {
			if e.User() == nil || len(e.User().Roles()) == 0 {
				return ""
			}
			return e.User().Roles()[0]
		}(),
		"userID": func() uuid.UUID {
			if e.User() == nil {
				return uuid.Nil
			}
			return e.User().ID()
		}(),
		"name":        e.Name(),
		"description": e.Description(),
		"isActive":    e.IsActive(),
		"scheduleAt":  e.ScheduleAt(),
		"createdAt":   e.CreatedAt().UnixMilli(),
		"updatedAt":   e.UpdatedAt().UnixMilli(),
		"channels":    e.Channels(),
		"criterias":   e.Criterias(),
	}
	return json.Marshal(res)
}
